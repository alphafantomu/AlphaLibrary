{"Libraries":{"IsPlugin":"{\"Source\":\"\\nreturn function()\\n\\tlocal returned = false;\\n\\tif (plugin ~= nil) then\\n\\t\\treturned = true;\\n\\telseif (plugin == nil) then\\n\\t\\treturned = false;\\n\\telse\\n\\t\\treturned = false;\\n\\tend;\\n\\treturn returned;\\nend;\",\"Archivable\":true,\"Parent\":null,\"DataCost\":4,\"ClassName\":\"ModuleScript\",\"Name\":\"IsPlugin\",\"LinkedSource\":\"\"}","Test":"{\"Source\":\"\\nreturn {\\n\\tError = function(msg, obj, line)\\n\\t\\tif (type(msg) == 'string' and obj ~= nil and type(line) == 'number') then\\n\\t\\t\\tlocal TestS = game:service'TestService';\\n\\t\\t\\tTestS:Error(msg, obj, line);\\n\\t\\telse\\n\\t\\t\\tassert(false, 'Message, Object or number is not a valid variable.');\\n\\t\\tend;\\n\\tend;\\n\\tCheck = function(msg, obj, line)\\n\\t\\tif (type(msg) == 'string' and obj ~= nil and type(line) == 'number') then\\n\\t\\t\\tlocal TestS = game:service'TestService';\\n\\t\\t\\tTestS:Check(false, msg, obj, line);\\n\\t\\telse\\n\\t\\t\\tassert(false, 'Message, Object or number is not a valid variable.');\\n\\t\\tend;\\n\\tend;\\n\\tFatalError = function(msg, obj, line)\\n\\t\\tif (type(msg) == 'string' and obj ~= nil and type(line) == 'number') then\\n\\t\\t\\tlocal TestS = game:service'TestService';\\n\\t\\t\\tTestS:Fail(msg, obj, line);\\n\\t\\telse\\n\\t\\t\\tassert(false, 'Message, Object or number is not a valid variable.');\\n\\t\\tend;\\n\\tend;\\n\\tFatalRequire = function(msg, obj, line)\\n\\t\\tif (type(msg) == 'string' and obj ~= nil and type(line) == 'number') then\\n\\t\\t\\tlocal TestS = game:service'TestService';\\n\\t\\t\\tTestS:Require(false, msg, obj, line);\\n\\t\\telse\\n\\t\\t\\tassert(false, 'Message, Object or number is not a valid variable.');\\n\\t\\tend;\\n\\tend;\\n\\tMessage = function(msg, obj, line)\\n\\t\\tif (type(msg) == 'string' and obj ~= nil and type(line) == 'number') then\\n\\t\\t\\tlocal TestS = game:service'TestService';\\n\\t\\t\\tTestS:Message(msg, obj, line);\\n\\t\\telse\\n\\t\\t\\tassert(false, 'Message, Object or number is not a valid variable.');\\n\\t\\tend;\\n\\tend;\\n\\tCheckpoint = function(msg, obj, line)\\n\\t\\tif (type(msg) == 'string' and obj ~= nil and type(line) == 'number') then\\n\\t\\t\\tlocal TestS = game:service'TestService';\\n\\t\\t\\tTestS:Checkpoint(msg, obj, line);\\n\\t\\telse\\n\\t\\t\\tassert(false, 'Message, Object or number is not a valid variable.');\\n\\t\\tend;\\n\\tend;\\n\\tWarn = function(msg, obj, line)\\n\\t\\tif (type(msg) == 'string' and obj ~= nil and type(line) == 'number') then\\n\\t\\t\\tlocal TestS = game:service'TestService';\\n\\t\\t\\tTestS:Warn(false, msg, obj, line);\\n\\t\\telse\\n\\t\\t\\tassert(false, 'Message, Object or number is not a valid variable.');\\n\\t\\tend;\\n\\tend;\\n\\t\\n};\",\"Archivable\":true,\"Parent\":null,\"DataCost\":4,\"ClassName\":\"ModuleScript\",\"Name\":\"Test\",\"LinkedSource\":\"\"}","SetCoreGuis":"{\"Source\":\"\\nreturn function(plr, val, coregui)\\n\\tif (type(plr) == 'userdata' and type(val) == 'bool' and plr:IsA'Player') then\\n\\t\\tlocal SG = game:service'StarterGui';\\n\\t\\tif (Enum.CoreGuiType[coregui] ~= nil) then\\n\\t\\t\\tSG:SetCoreGuiEnabled(Enum.CoreGuiType[coregui], val);\\n\\t\\telse\\n\\t\\t\\tassert(false, 'CoreGui value is not a valid variable.');\\n\\t\\tend;\\n\\telse\\n\\t\\tassert(false, 'Player, or Value is not a valid variable.');\\n\\tend;\\nend;\",\"Archivable\":true,\"Parent\":null,\"DataCost\":4,\"ClassName\":\"ModuleScript\",\"Name\":\"SetCoreGuis\",\"LinkedSource\":\"\"}","HttpState":"{\"Source\":\"\\nreturn function()\\n\\tlocal Http = game:service'HttpService';\\n\\tlocal State = true;\\n\\tlocal run, err = pcall(function() Http:GetAsync('google.com') end);\\n\\tif (not run) then\\n\\t\\tif (tostring(err) == 'Http requests are not enabled') then\\n\\t\\t\\tState = false;\\n\\t\\telse\\n\\t\\t\\tState = true;\\n\\t\\tend;\\n\\tend;\\n\\treturn State;\\nend;\",\"Archivable\":true,\"Parent\":null,\"DataCost\":4,\"ClassName\":\"ModuleScript\",\"Name\":\"HttpState\",\"LinkedSource\":\"\"}","TimedThread":"{\"Source\":\"\\nreturn function(...)\\n\\tif (...) then\\n\\t\\tlocal starttick = tonumber(tick());\\n\\t\\tfor _, function_ in next, {...} do\\n\\t\\t\\tspawn(function_);\\n\\t\\tend;\\n\\t\\tlocal endtick = tonumber(tick());\\n\\t\\twarn('That thread took: '..endtick - starttick..' seconds');\\n\\tend;\\nend;\",\"Archivable\":true,\"Parent\":null,\"DataCost\":4,\"ClassName\":\"ModuleScript\",\"Name\":\"TimedThread\",\"LinkedSource\":\"\"}","IsLegalBadge":"{\"Source\":\"\\nreturn function(id)\\n\\tif (id ~= nil) then\\n\\t\\tlocal Badge = game:service'BadgeService';\\n\\t\\treturn Badge:IsLegal(id);\\n\\telse\\n\\t\\tassert(false, 'Badge ID is nil');\\n\\tend;\\nend;\",\"Archivable\":true,\"Parent\":null,\"DataCost\":4,\"ClassName\":\"ModuleScript\",\"Name\":\"IsLegalBadge\",\"LinkedSource\":\"\"}","TimedFunction":"{\"Source\":\"\\nreturn function(func)\\n\\tif (func) then\\n\\t\\tlocal starttick = tonumber(tick());\\n\\t\\tfunc();\\n\\t\\tlocal endtick = tonumber(tick());\\n\\t\\twarn('That function took: '..endtick - starttick..' seconds');\\n\\tend;\\nend;\",\"Archivable\":true,\"Parent\":null,\"DataCost\":4,\"ClassName\":\"ModuleScript\",\"Name\":\"TimedFunction\",\"LinkedSource\":\"\"}","Weld":"{\"Source\":\"\\nreturn function(p1, p2)\\n\\tif (p1 ~= nil and p2 ~= nil) then\\n\\t\\tlocal Weld = Instance.new'Weld';\\n\\t\\tWeld.Parent = p1;\\n\\t\\tWeld.Part0 = p1;\\n\\t\\tWeld.Part1 = p2;\\n\\t\\tWeld.Name = p1.Name..'_to_'..p2.Name;\\n\\t\\treturn Weld;\\n\\telse\\n\\t\\tassert(false, 'Part0 or Part1 are unable to be identified.');\\n\\tend;\\nend;\",\"Archivable\":true,\"Parent\":null,\"DataCost\":4,\"ClassName\":\"ModuleScript\",\"Name\":\"Weld\",\"LinkedSource\":\"\"}","Motor":"{\"Source\":\"\\nreturn function(p1, p2)\\n\\tif (p1 ~= nil and p2 ~= nil) then\\n\\t\\tlocal Motor = Instance.new'Motor';\\n\\t\\tMotor.Parent = p1;\\n\\t\\tMotor.Part0 = p1;\\n\\t\\tMotor.Part1 = p2;\\n\\t\\tMotor.Name = p1.Name..'_to_'..p2.Name;\\n\\t\\treturn Motor;\\n\\telse\\n\\t\\tassert(false, 'Part0 or Part1 are unable to be identified.');\\n\\tend;\\nend;\",\"Archivable\":true,\"Parent\":null,\"DataCost\":4,\"ClassName\":\"ModuleScript\",\"Name\":\"Motor\",\"LinkedSource\":\"\"}","BrickColor3":"{\"Source\":\"\\nreturn function(bc)\\n\\tif (bc ~= nil) then\\n\\t\\treturn bc.Color;\\n\\telse\\n\\t\\tassert(false, 'BrickColor is nil');\\n\\tend;\\nend;\",\"Archivable\":true,\"Parent\":null,\"DataCost\":4,\"ClassName\":\"ModuleScript\",\"Name\":\"BrickColor3\",\"LinkedSource\":\"\"}","InsertModel":"{\"Source\":\"\\nreturn function(id)\\n\\tif (type(id) == 'number') then\\n\\t\\tlocal IS = game:service'InsertService';\\n\\t\\tlocal Model = IS:LoadAsset(id);\\n\\t\\treturn Model;\\n\\telse\\n\\t\\tassert(false, 'ID is not a number');\\n\\tend;\\nend;\\n\",\"Archivable\":true,\"Parent\":null,\"DataCost\":4,\"ClassName\":\"ModuleScript\",\"Name\":\"InsertModel\",\"LinkedSource\":\"\"}","NewThread":"{\"Source\":\"\\nreturn function(...)\\n\\tfor _, function_ in next, {...} do\\n\\t\\tspawn(function_);\\n\\tend;\\nend;\",\"Archivable\":true,\"Parent\":null,\"DataCost\":4,\"ClassName\":\"ModuleScript\",\"Name\":\"NewThread\",\"LinkedSource\":\"\"}","FindChildOfData":"{\"Source\":\"\\nreturn function(obj, t)\\n\\tif (obj ~= nil and type(t) == 'table') then\\n\\t\\tlocal FoundObj, Stop, Tries = nil, false, 0;\\n\\t\\trepeat\\n\\t\\t\\twait();\\n\\t\\t\\tlocal NewObj = obj:FindFirstChild(t.Name);\\n\\t\\t\\tif (NewObj ~= nil) then\\n\\t\\t\\t\\tTries = Tries + 1;\\n\\t\\t\\t\\tfor i,v in next, t do\\n\\t\\t\\t\\t\\tif (NewObj[i] ~= nil) then\\n\\t\\t\\t\\t\\t\\tif (NewObj[i] == v and Stop == false) then\\n\\t\\t\\t\\t\\t\\t\\tFoundObj = NewObj;\\n\\t\\t\\t\\t\\t\\t\\tStop = true;\\n\\t\\t\\t\\t\\t\\tend;\\n\\t\\t\\t\\t\\tend;\\n\\t\\t\\t\\tend;\\n\\t\\t\\tend;\\n\\t\\tuntil\\n\\t\\t\\tStop == true and FoundObj ~= nil or Tries >= 5;\\n\\t\\tif (Tries >= 5) then\\n\\t\\t\\tassert(false, 'The maximum amount of tries exceeded five, therefore \\\"FindChildOfData\\\" will return nil.');\\n\\t\\tend;\\n\\t\\treturn FoundObj;\\n\\telse\\n\\t\\tassert(false, 'Object or table is not a valid variable.');\\n\\tend;\\nend;\",\"Archivable\":true,\"Parent\":null,\"DataCost\":4,\"ClassName\":\"ModuleScript\",\"Name\":\"FindChildOfData\",\"LinkedSource\":\"\"}","PrivateServer":"{\"Source\":\"\\nreturn {\\n\\tCreateServer = function()\\n\\t\\tlocal TeleS = game:service'TeleportService';\\n\\t\\treturn TeleS:ReserveServer(tonumber(game.PlaceId));\\n\\tend;\\n\\tTeleToPrivate = function(ac, plrs)\\n\\t\\tif (ac ~= nil) then\\n\\t\\t\\tif (type(plrs) == 'table') then\\n\\t\\t\\t\\tlocal TeleS = game:service'TeleportService';\\n\\t\\t\\t\\tTeleS:TeleportToPrivateServer(tonumber(game.PlaceId), ac, plrs, nil, nil);\\n\\t\\t\\telse\\n\\t\\t\\t\\tassert(false, 'Players table is not a table');\\n\\t\\t\\tend;\\n\\t\\telse\\n\\t\\t\\tassert(false, 'Private Server Access Code is nil');\\n\\t\\tend;\\n\\tend;\\n};\",\"Archivable\":true,\"Parent\":null,\"DataCost\":4,\"ClassName\":\"ModuleScript\",\"Name\":\"PrivateServer\",\"LinkedSource\":\"\"}","AwardBadge":"{\"Source\":\"\\nreturn function(id, badid)\\n\\tlocal Badge = game:service'BadgeService';\\n\\tif (type(id) == 'number') then\\n\\t\\tBadge:AwardBadge(id, badid);\\n\\telseif (type(id) == 'userdata') then\\n\\t\\tif (id.ClassName == 'Player') then\\n\\t\\t\\tid = id.UserId;\\n\\t\\t\\tBadge:AwardBadge(id, badid);\\n\\t\\telse\\n\\t\\t\\tassert(false, 'PLR_INSTANCE is not a player.');\\n\\t\\tend;\\n\\telse\\n\\t\\tassert(false, 'PLR_ID is not valid.');\\n\\tend;\\nend;\",\"Archivable\":true,\"Parent\":null,\"DataCost\":4,\"ClassName\":\"ModuleScript\",\"Name\":\"AwardBadge\",\"LinkedSource\":\"\"}","GivePoints":"{\"Source\":\"\\nreturn function(id, amt)\\n\\tlocal Points = game:service'PointsService';\\n\\tamt = tonumber(amt);\\n\\tif (type(id) == 'number') then\\n\\t\\tPoints:AwardPoints(id, amt);\\n\\telseif (type(id) == 'userdata') then\\n\\t\\tif (id.ClassName == 'Player') then\\n\\t\\t\\tid = id.UserId;\\n\\t\\t\\tPoints:AwardPoints(id, amt);\\n\\t\\telse\\n\\t\\t\\tassert(false, 'PLR_INSTANCE is not a player.');\\n\\t\\tend;\\n\\telse\\n\\t\\tassert(false, 'PLR_ID is not valid.');\\n\\tend;\\nend;\\n\\n\\n\",\"Archivable\":true,\"Parent\":null,\"DataCost\":4,\"ClassName\":\"ModuleScript\",\"Name\":\"GivePoints\",\"LinkedSource\":\"\"}","IsClientSided":"{\"Source\":\"\\nreturn function()\\n\\tlocal Players, returned = game:service'Players', false;\\n\\tif (Players.LocalPlayer ~= nil) then\\n\\t\\treturned = true;\\n\\telseif (Players.LocalPlayer == nil) then\\n\\t\\treturned = false;\\n\\telse\\n\\t\\treturned = false;\\n\\tend;\\n\\treturn returned;\\nend;\",\"Archivable\":true,\"Parent\":null,\"DataCost\":4,\"ClassName\":\"ModuleScript\",\"Name\":\"IsClientSided\",\"LinkedSource\":\"\"}","LoadAssets":"{\"Source\":\"\\nreturn function(t)\\n\\tif (t ~= nil and type(t) == 'table') then\\n\\t\\tlocal CP = game:service'ContentProvider';\\n\\t\\tfor i, v in next, t do\\n\\t\\t\\twarn('AlphaLibrary>LoadAssets: Loading asset '..v);\\n\\t\\t\\tCP:Preload('rbxassetid://'..v);\\n\\t\\tend;\\n\\telse\\n\\t\\tassert(false, 'Table is not a valid variable.');\\n\\tend;\\nend;\\n\",\"Archivable\":true,\"Parent\":null,\"DataCost\":4,\"ClassName\":\"ModuleScript\",\"Name\":\"LoadAssets\",\"LinkedSource\":\"\"}","CFrameToVector3":"{\"Source\":\"\\nreturn function(cframe)\\n\\tif (type(cframe) == 'userdata') then\\n\\t\\treturn Vector3.new(cframe.x, cframe.y, cframe.z);\\n\\telse\\n\\t\\tassert(false, 'CFrame is not a userdata.');\\n\\tend;\\nend;\",\"Archivable\":true,\"Parent\":null,\"DataCost\":4,\"ClassName\":\"ModuleScript\",\"Name\":\"CFrameToVector3\",\"LinkedSource\":\"\"}","Instance":"{\"Source\":\"\\nreturn {\\n\\tNew = function(p)\\n\\t\\tif (type(p) == 'table') then\\n\\t\\t\\tlocal Obj = Instance.new(p.ClassName);\\n\\t\\t\\tfor i,v in next, p do\\n\\t\\t\\t\\tlocal run, err = pcall(function()\\n\\t\\t\\t\\t\\tif (Obj[i] ~= nil) then\\n\\t\\t\\t\\t\\t\\tObj[i] = v;\\n\\t\\t\\t\\t\\tend;\\n\\t\\t\\t\\tend);\\n\\t\\t\\t\\tif (not run) then\\n\\t\\t\\t\\t\\tassert(false, tostring(err));\\n\\t\\t\\t\\tend;\\n\\t\\t\\tend;\\n\\t\\telse\\n\\t\\t\\tassert(false, 'Properties is not a valid table');\\n\\t\\tend;\\n\\tend;\\n\\tConvertClass = function(obj, cn, prop)\\n\\t\\tif (obj ~= nil and type(cn) == 'string') then\\n\\t\\t\\tlocal Converted = Instance.new(cn);\\n\\t\\t\\tConverted.Parent = obj.Parent;\\n\\t\\t\\tfor i, v in next, prop do\\n\\t\\t\\t\\tlocal run, err = pcall(function()\\n\\t\\t\\t\\t\\tif (obj[v] ~= nil) then\\n\\t\\t\\t\\t\\t\\tif (Converted[v] ~= nil) then\\n\\t\\t\\t\\t\\t\\t\\tConverted[v] = obj[v];\\n\\t\\t\\t\\t\\t\\tend;\\n\\t\\t\\t\\t\\tend;\\n\\t\\t\\t\\tend);\\n\\t\\t\\t\\tif (not run) then\\n\\t\\t\\t\\t\\tassert(false, tostring(err));\\n\\t\\t\\t\\tend;\\n\\t\\t\\tend;\\n\\t\\t\\tobj:Destroy();\\n\\t\\telse\\n\\t\\t\\tassert(false, 'Object or Classname is not a valid variable');\\n\\t\\tend;\\n\\tend;\\n};\",\"Archivable\":true,\"Parent\":null,\"DataCost\":4,\"ClassName\":\"ModuleScript\",\"Name\":\"Instance\",\"LinkedSource\":\"\"}","OutputLog":"{\"Source\":\"\\nreturn function()\\n\\tlocal LogS = game:service'LogService';\\n\\treturn LogS:GetLogHistory();\\nend;\",\"Archivable\":true,\"Parent\":null,\"DataCost\":4,\"ClassName\":\"ModuleScript\",\"Name\":\"OutputLog\",\"LinkedSource\":\"\"}","SearchInstance":"{\"Source\":\"\\nreturn function(obj, name)\\n\\tif (obj ~= nil and name ~= nil) then\\n\\t\\tlocal SearchObj = nil;\\n\\t\\tSearchObj = function(ob)\\n\\t\\t\\tlocal returned = nil;\\n\\t\\t\\tif (ob:children() ~= nil) then\\n\\t\\t\\t\\tif (ob:FindFirstChild(name) ~= nil) then\\n\\t\\t\\t\\t\\treturned = ob:FindFirstChild(name);\\n\\t\\t\\t\\telse\\n\\t\\t\\t\\t\\tfor i = 1, #ob:children() do\\n\\t\\t\\t\\t\\t\\tif (ob:children()[i] ~= nil) then\\n\\t\\t\\t\\t\\t\\t\\tif (returned == nil) then\\n\\t\\t\\t\\t\\t\\t\\t\\treturned = ob:children()[i];\\n\\t\\t\\t\\t\\t\\t\\tend;\\n\\t\\t\\t\\t\\t\\tend;\\n\\t\\t\\t\\t\\tend;\\n\\t\\t\\t\\tend;\\n\\t\\t\\tend;\\n\\t\\t\\tif (returned == workspace) then\\n\\t\\t\\t\\treturned = nil;\\n\\t\\t\\tend;\\n\\t\\t\\treturn returned;\\n\\t\\tend;\\n\\t\\treturn SearchObj(obj);\\n\\telse\\n\\t\\tassert(false, 'Object or Name is nil');\\n\\tend;\\nend;\",\"Archivable\":true,\"Parent\":null,\"DataCost\":4,\"ClassName\":\"ModuleScript\",\"Name\":\"SearchInstance\",\"LinkedSource\":\"\"}","UserHasBadge":"{\"Source\":\"\\nreturn function(id, badid)\\n\\tlocal Badge = game:service'BadgeService';\\n\\tif (type(id) == 'number') then\\n\\t\\treturn Badge:UserHasBadge(id, badid);\\n\\telseif (type(id) == 'userdata') then\\n\\t\\tif (id.ClassName == 'Player') then\\n\\t\\t\\tid = id.UserId;\\n\\t\\t\\treturn Badge:UserHasBadge(id, badid);\\n\\t\\telse\\n\\t\\t\\tassert(false, 'PLR_INSTANCE is not a player.');\\n\\t\\tend;\\n\\telse\\n\\t\\tassert(false, 'PLR_ID is not valid.');\\n\\tend;\\nend;\",\"Archivable\":true,\"Parent\":null,\"DataCost\":4,\"ClassName\":\"ModuleScript\",\"Name\":\"UserHasBadge\",\"LinkedSource\":\"\"}","Vector3ToCFrame":"{\"Source\":\"\\nreturn function(vector3)\\n\\tif (type(vector3) == 'userdata') then\\n\\t\\treturn CFrame.new(vector3.x, vector3.y, vector3.z);\\n\\telse\\n\\t\\tassert(false, 'Vector3 is not a userdata.');\\n\\tend;\\nend;\",\"Archivable\":true,\"Parent\":null,\"DataCost\":4,\"ClassName\":\"ModuleScript\",\"Name\":\"Vector3ToCFrame\",\"LinkedSource\":\"\"}","IsDisabledBadge":"{\"Source\":\"\\nreturn function(id)\\n\\tif (id ~= nil) then\\n\\t\\tlocal Badge = game:service'BadgeService';\\n\\t\\treturn Badge:IsDisabled(id);\\n\\telse\\n\\t\\tassert(false, 'Badge ID is nil');\\n\\tend;\\nend;\",\"Archivable\":true,\"Parent\":null,\"DataCost\":4,\"ClassName\":\"ModuleScript\",\"Name\":\"IsDisabledBadge\",\"LinkedSource\":\"\"}"},"AlphaLibrary":"{\"Source\":\"\\n--[[\\n\\t\\n\\t>>AlphaLibrary Plugin<<\\n\\t\\t\\n\\t\\t\\tThis library should be injected through the AlphaLibrary Plugin by\\n\\t\\thyperionGM at https://www.roblox.com/library/586917550/dasd\\n\\t\\tPlease do not steal, take credit for this plugin and library.\\n\\t\\tBe respectful of other people's work! :)\\n\\t\\t\\n\\t>>AlphaLibrary<<\\n\\t\\t\\n\\t\\t<Version 1.5>\\n\\t\\t\\n\\t\\tAlphaLibrary is a provides functions that may help with various things.\\n\\t\\t\\n\\t>>Location<<\\n\\t\\n\\t\\t\\tThe AlphaLibrary Module should be parented to game (DataModel, or Place1),\\n\\t\\talthough AlphaLibrary is also accessible through _G, and shared on all sides.\\n\\t\\t\\n\\t>>Members<<\\n\\t\\n\\t\\t\\tAlphaLibrary.AwardBadge(id, badge_id)\\n\\t\\t\\t\\t- Description\\n\\t\\t\\t\\t\\t- Awards a player with a badge.\\n\\t\\t\\t\\t- Parameters\\n\\t\\t\\t\\t\\tName // Type // Description\\n\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t- id // number // A player's UserId.\\n\\t\\t\\t\\t\\t- badge_id // number // A badge's id.\\n\\t\\t\\t\\t- Returns\\n\\t\\t\\t\\t\\t- None\\n\\t\\t\\t\\t\\t\\n\\t\\t\\tAlphaLibrary.BrickColor3(brickcolor)\\n\\t\\t\\t\\t- Description\\n\\t\\t\\t\\t\\t- Converts a BrickColor value into a Color3 format.\\n\\t\\t\\t\\t- Parameters\\n\\t\\t\\t\\t\\tName // Type // Description\\n\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t- brickcolor // userdata // BrickColor, example may be BrickColor.new'Really red'\\n\\t\\t\\t\\t- Returns\\n\\t\\t\\t\\t\\t- Color3\\n\\t\\t\\t\\n\\t\\t\\tAlphaLibrary.CFrameToVector3(cframe)\\n\\t\\t\\t\\t- Description\\n\\t\\t\\t\\t\\t- Converts a CFrame value into a Vector3 format.\\n\\t\\t\\t\\t- Parameters\\n\\t\\t\\t\\t\\tName // Type // Description\\n\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t- cframe // userdata // CFrame(x, y, z), an example may be CFrame.new(1, 1, 1)\\n\\t\\t\\t\\t- Returns\\n\\t\\t\\t\\t\\t- Vector3\\n\\t\\t\\t\\t\\t\\n\\t\\t\\tAlphaLibrary.FindChildOfData(obj, table)\\n\\t\\t\\t\\t- Description\\n\\t\\t\\t\\t\\t- Finds a specific object within argument (obj) with the properties of (table)\\n\\t\\t\\t\\t- Parameters\\n\\t\\t\\t\\t\\tName // Type // Description\\n\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t- obj // userdata/service // Instance, object to be searched within.\\n\\t\\t\\t\\t\\t- table // table // Table, to specify what properties you require of what you are seeking.\\n\\t\\t\\t\\t- Returns\\n\\t\\t\\t\\t\\t- Specified Object or nil (if maximum tries exceed five.)\\n\\t\\t\\t\\n\\t\\t\\tAlphaLibrary.GivePoints(id, amt)\\n\\t\\t\\t\\t- Description\\n\\t\\t\\t\\t\\t- Gives Player Points to a player using an id.\\n\\t\\t\\t\\t- Parameters\\n\\t\\t\\t\\t\\tName // Type // Description\\n\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t- id // number // A player's UserId.\\n\\t\\t\\t\\t\\t- amt // number // Any number, number reflects on how many points the player is given.\\n\\t\\t\\t\\t- Returns\\n\\t\\t\\t\\t\\t- None\\n\\t\\t\\t\\t\\t\\n\\t\\t\\tAlphaLibrary.HttpState()\\n\\t\\t\\t\\t- Description\\n\\t\\t\\t\\t\\t- Checks if HttpService is enabled, true if it's on, false if it isn't.\\n\\t\\t\\t\\t- Parameters\\n\\t\\t\\t\\t\\tName // Type // Description\\n\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t- None // nil // Undefined\\n\\t\\t\\t\\t- Returns\\n\\t\\t\\t\\t\\ttrue (if HttpService is on), or false (if HttpService is off).\\n\\t\\t\\t\\t\\t\\n\\t\\t\\tAlphaLibrary.Instance{}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\t-\\tAlphaLibrary.Instance.New(p)\\n\\t\\t\\t\\t\\t- Description\\n\\t\\t\\t\\t\\t\\t- Creates a new instance using a properties table, any unfilled properties will either be nil or filled-in by the class.\\n\\t\\t\\t\\t\\t- Parameters\\n\\t\\t\\t\\t\\t\\tName // Type // Description\\n\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\t- p // table // Properties Table to be defined, an example may be {Name = 'Undefined'}\\n\\t\\t\\t\\t\\t- Returns\\n\\t\\t\\t\\t\\t\\t- Requested Instance\\n\\t\\t\\t\\t\\n\\t\\t\\t\\t-\\tAlphaLibrary.Instance.ConvertClass(obj, cn, prop)\\n\\t\\t\\t\\t\\t- Description\\n\\t\\t\\t\\t\\t\\t- Converts a userdata instance into a specified classname with certain requested properties.\\n\\t\\t\\t\\t\\t- Parameters\\n\\t\\t\\t\\t\\t\\tName // Type // Description\\n\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\t- obj // userdata // An Instance, object to be converted.\\n\\t\\t\\t\\t\\t\\t- cn // string // A string defining a ClassName, an example would be 'LocalScript'\\n\\t\\t\\t\\t\\t\\t- prop // table // A properties table to be passed along during conversion.\\n\\t\\t\\t\\t\\t- Returns\\n\\t\\t\\t\\t\\t\\t- Converted Object\\n\\t\\t\\t\\n\\t\\t\\tAlphaLibrary.IsClientSided()\\n\\t\\t\\t\\t- Description\\n\\t\\t\\t\\t\\t- Checks if the required script is client sided or not.\\n\\t\\t\\t\\t- Parameters\\n\\t\\t\\t\\t\\tName // Type // Description\\n\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t- None // nil // Undefined.\\n\\t\\t\\t\\t- Returns\\n\\t\\t\\t\\t\\t- true (if client sided) or false (if not client sided)\\n\\t\\t\\t\\n\\t\\t\\tAlphaLibrary.IsDisabledBadge(id)\\n\\t\\t\\t\\t- Description\\n\\t\\t\\t\\t\\t- Checks if the badge id is still available to be used.\\n\\t\\t\\t\\t- Parameters\\n\\t\\t\\t\\t\\tName // Type // Description\\n\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t- id // number // A Badge's id.\\n\\t\\t\\t\\t- Returns\\n\\t\\t\\t\\t\\t- true (if the badge is disabled) or false (otherwise)\\n\\t\\t\\t\\t\\t\\n\\t\\t\\tAlphaLibrary.IsLegalBadge(id)\\n\\t\\t\\t\\t- Description\\n\\t\\t\\t\\t\\t- Checks if the badge id is able to be awarded in the place.\\n\\t\\t\\t\\t- Parameters\\n\\t\\t\\t\\t\\tName // Type // Description\\n\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t- id // number // A Badge's id.\\n\\t\\t\\t\\t- Returns\\n\\t\\t\\t\\t\\t- true (if badge can be awarded in the place) or false (otherwise)\\n\\t\\t\\t\\t\\t\\n\\t\\t\\tAlphaLibrary.LoadAssets(t)\\n\\t\\t\\t\\t- Description\\n\\t\\t\\t\\t\\t- Loads a table fill of assets.\\n\\t\\t\\t\\t- Parameters\\n\\t\\t\\t\\t\\tName // Type // Description\\n\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t- t // table // a table of assets, example may be {578151163, 568208530}.\\n\\t\\t\\t\\t- Returns\\n\\t\\t\\t\\t\\t- None\\n\\t\\t\\t\\t\\t\\n\\t\\t\\tAlphaLibrary.Motor(p1, p2)\\n\\t\\t\\t\\t- Description\\n\\t\\t\\t\\t\\t- Creates a Motor Instance between two userdata instances.\\n\\t\\t\\t\\t- Parameters\\n\\t\\t\\t\\t\\tName // Type // Description\\n\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t- p1 // userdata // Object one to be attached\\n\\t\\t\\t\\t\\t- p2 // userdata // Object two to be attached with object one.\\n\\t\\t\\t\\t- Returns\\n\\t\\t\\t\\t\\t - Motor Instance\\n\\t\\t\\t\\t\\t\\n\\t\\t\\tAlphaLibrary.NewThread(...)\\n\\t\\t\\t\\t- Description\\n\\t\\t\\t\\t\\t- Creates and runs a thread function.\\n\\t\\t\\t\\t- Parameters\\n\\t\\t\\t\\t\\tName // Type // Description\\n\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t- ... // thread_lines // line of a function to be executed as a thread.\\n\\t\\t\\t\\t- Returns\\n\\t\\t\\t\\t\\t- None\\n\\t\\t\\t\\t\\t\\n\\t\\t\\tAlphaLibrary.SearchInstance(obj, name)\\n\\t\\t\\t\\t- Description\\n\\t\\t\\t\\t\\t- Searches for a specified instance within (obj).\\n\\t\\t\\t\\t- Parameters\\n\\t\\t\\t\\t\\tName // Type // Description\\n\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t- obj // userdata // Instance to be searched within\\n\\t\\t\\t\\t\\t- name // string // Name of instance\\n\\t\\t\\t\\t- Returns\\n\\t\\t\\t\\t\\t- Seeked Object, or nil (if the found object was not found or was workspace)\\n\\t\\t\\t\\n\\t\\t\\tAlphaLibrary.SetCoreGuis(plr, val, coregui)\\n\\t\\t\\t\\t- Description\\n\\t\\t\\t\\t\\t- Sets the client-sided coreguis to a certain mode.\\n\\t\\t\\t\\t- Parameters\\n\\t\\t\\t\\t\\tName // Type // Description\\n\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t- plr // userdata // A player object, or an object with a 'Player' ClassName.\\n\\t\\t\\t\\t\\t- val // bool // depends if core-gui is shown or not.\\n\\t\\t\\t\\t\\t- coregui // string // searches Enum.CoreGuiType for the string.\\n\\t\\t\\t\\t- Returns\\n\\t\\t\\t\\t\\t- None\\n\\t\\t\\t\\t\\t\\n\\t\\t\\tAlphaLibrary.TimedFunction(func)\\n\\t\\t\\t\\t- Description\\n\\t\\t\\t\\t\\t- Initiates a function and times it to see how long it takes for it to finish.\\n\\t\\t\\t\\t- Parameters\\n\\t\\t\\t\\t\\tName // Type // Description\\n\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\tfunc // function // Function to be onitiated\\n\\t\\t\\t\\t- Returns\\n\\t\\t\\t\\t\\t- None\\n\\t\\t\\tAlphaLibrary.TimedThread(...)\\n\\t\\t\\t\\t- Description\\n\\t\\t\\t\\t\\t- Initiated a thread to be timed until it's finished.\\n\\t\\t\\t\\t- Parameters\\n\\t\\t\\t\\t\\tName // Type // Description\\n\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t- ... // thread_lines // lines of a function to be executed as a thread.\\n\\t\\t\\t\\t- Returns\\n\\t\\t\\t\\t\\t- None\\n\\t\\t\\t\\t\\t\\n\\t\\t\\tAlphaLibrary.UserHasBadge(id, badge_id)\\n\\t\\t\\t\\t- Description\\n\\t\\t\\t\\t\\t- Checks if the UserId has the badge specified with an id.\\n\\t\\t\\t\\t- Parameters\\n\\t\\t\\t\\t\\tName // Type // Description\\n\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\tid // number // A player's UserId.\\n\\t\\t\\t\\t\\tbadge_id // number // A badge's id.\\n\\t\\t\\t\\t- Returns\\n\\t\\t\\t\\t\\t - true (is player has badge) or false (otherwise)\\n\\t\\t\\t\\t\\t\\n\\t\\t\\tAlphaLibrary.Vector3ToCframe(vector3)\\n\\t\\t\\t\\t- Description\\n\\t\\t\\t\\t\\t- Converts a Vector3 value into a CFrame format.\\n\\t\\t\\t\\t- Parameters\\n\\t\\t\\t\\t\\tName // Type // Description\\n\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t- vector3 // userdata // A Vector3 value to be converted, an example may be Vector3.new(1, 1, 1)\\n\\t\\t\\t\\t- Returns\\n\\t\\t\\t\\t\\t - CFrame\\n\\t\\t\\t\\n\\t\\t\\tAlphaLibrary.Weld(p1, p2)\\n\\t\\t\\t\\t- Description\\n\\t\\t\\t\\t\\t- Creates a weld instance between two userdata instances.\\n\\t\\t\\t\\t- Parameters\\n\\t\\t\\t\\t\\tName // Type // Description\\n\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t- p1 // userdata // First instance to be attached to.\\n\\t\\t\\t\\t\\t- p2 // userdata // Second instance attached to first instance.\\n\\t\\t\\t\\t- Returns\\n\\t\\t\\t\\t\\t- Weld\\n\\t\\t\\t\\t\\t\\n\\t\\t\\tAlphaLibrary.IsPlugin()\\n\\t\\t\\t\\t- Description\\n\\t\\t\\t\\t\\t- Checks if the required script is a plugin script.\\n\\t\\t\\t\\t- Parameters\\n\\t\\t\\t\\t\\tName // Type // Description\\n\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t- None // nil // Undefined\\n\\t\\t\\t\\t- Returns\\n\\t\\t\\t\\t\\t- true (if is plugin) or false (otherwise)\\n\\t\\t\\t\\t\\n\\t\\t\\tAlphaLibrary.InsertModel(id)\\n\\t\\t\\t\\t- Description\\n\\t\\t\\t\\t\\t- Inserts a model using InsertService.\\n\\t\\t\\t\\t- Parameters\\n\\t\\t\\t\\t\\tName // Type // Description\\n\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t- id // number // Model ID\\n\\t\\t\\t\\t- Returns\\n\\t\\t\\t\\t\\t- Inserted Model\\n\\t\\t\\t\\t\\t\\n\\t\\t\\tAlphaLibrary.OutputLog()\\n\\t\\t\\t\\t- Description\\n\\t\\t\\t\\t\\t- Returns the output log supported by LogService.\\n\\t\\t\\t\\t- Parameters\\n\\t\\t\\t\\t\\tName // Type // Description\\n\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t- None // nil // Undefined\\n\\t\\t\\t\\t- Returns\\n\\t\\t\\t\\t\\t- Logged Table\\n\\t\\t\\t\\n\\t\\t\\tAlphaLibrary.Test{}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\t-\\tAlphaLibrary.Test.Error(msg, obj, line)\\n\\t\\t\\t\\t\\t- Description\\n\\t\\t\\t\\t\\t\\t- Inputs an error in output with TestService\\n\\t\\t\\t\\t\\t- Parameters\\n\\t\\t\\t\\t\\t\\tName // Type // Description\\n\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\t- msg // string // Error message to be outputted\\n\\t\\t\\t\\t\\t\\t- obj // userdata // Object to be errored on, can be anything.\\n\\t\\t\\t\\t\\t\\t- line // number // The line the error occurs on\\n\\t\\t\\t\\t\\t- Returns\\n\\t\\t\\t\\t\\t\\t- None\\n\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t-\\tAlphaLibrary.Test.Check(msg, obj, line)\\n\\t\\t\\t\\t\\t- Description\\n\\t\\t\\t\\t\\t\\t- Inputs an error in output with TestService\\n\\t\\t\\t\\t\\t- Parameters\\n\\t\\t\\t\\t\\t\\tName // Type // Description\\n\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\t- msg // string // Error message to be outputted\\n\\t\\t\\t\\t\\t\\t- obj // userdata // Object to be errored on, can be anything.\\n\\t\\t\\t\\t\\t\\t- line // number // The line the error occurs on\\n\\t\\t\\t\\t\\t- Returns\\n\\t\\t\\t\\t\\t\\t- None\\n\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t-\\tAlphaLibrary.Test.FatalError(msg, obj, line)\\n\\t\\t\\t\\t\\t- Description\\n\\t\\t\\t\\t\\t\\t- Inputs a \\\"fatal\\\" error in output with TestService\\n\\t\\t\\t\\t\\t- Parameters\\n\\t\\t\\t\\t\\t\\tName // Type // Description\\n\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\t- msg // string // Error message to be outputted\\n\\t\\t\\t\\t\\t\\t- obj // userdata // Object to be errored on, can be anything.\\n\\t\\t\\t\\t\\t\\t- line // number // The line the error occurs on\\n\\t\\t\\t\\t\\t- Returns\\n\\t\\t\\t\\t\\t\\t- None\\n\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t-\\tAlphaLibrary.Test.FatalRequire(msg, obj, line)\\n\\t\\t\\t\\t\\t- Description\\n\\t\\t\\t\\t\\t\\t- Inputs a \\\"fatal\\\" error in output with TestService\\n\\t\\t\\t\\t\\t- Parameters\\n\\t\\t\\t\\t\\t\\tName // Type // Description\\n\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\t- msg // string // Error message to be outputted\\n\\t\\t\\t\\t\\t\\t- obj // userdata // Object to be errored on, can be anything.\\n\\t\\t\\t\\t\\t\\t- line // number // The line the error occurs on\\n\\t\\t\\t\\t\\t- Returns\\n\\t\\t\\t\\t\\t\\t- None\\n\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t-\\tAlphaLibrary.Test.Message(msg, obj, line)\\n\\t\\t\\t\\t\\t- Description\\n\\t\\t\\t\\t\\t\\t- Inputs a message or \\\"blue text\\\" in output with TestService\\n\\t\\t\\t\\t\\t- Parameters\\n\\t\\t\\t\\t\\t\\tName // Type // Description\\n\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\t- msg // string // Error message to be outputted\\n\\t\\t\\t\\t\\t\\t- obj // userdata // Object to be errored on, can be anything.\\n\\t\\t\\t\\t\\t\\t- line // number // The line the error occurs on\\n\\t\\t\\t\\t\\t- Returns\\n\\t\\t\\t\\t\\t\\t- None\\n\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t-\\tAlphaLibrary.Test.Checkpoint(msg, obj, line)\\n\\t\\t\\t\\t\\t- Description\\n\\t\\t\\t\\t\\t\\t- Inputs a message or \\\"blue text\\\" in output with TestService\\n\\t\\t\\t\\t\\t- Parameters\\n\\t\\t\\t\\t\\t\\tName // Type // Description\\n\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\t- msg // string // Error message to be outputted\\n\\t\\t\\t\\t\\t\\t- obj // userdata // Object to be errored on, can be anything.\\n\\t\\t\\t\\t\\t\\t- line // number // The line the error occurs on\\n\\t\\t\\t\\t\\t- Returns\\n\\t\\t\\t\\t\\t\\t- None\\n\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t-\\tAlphaLibrary.Test.Warn(msg, obj, line)\\n\\t\\t\\t\\t\\t- Description\\n\\t\\t\\t\\t\\t\\tInputs a warning input or \\\"yellow text\\\" in output with TestService.\\n\\t\\t\\t\\t\\t- Parameters\\n\\t\\t\\t\\t\\t\\tName // Type // Description\\n\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\t- msg // string // Error message to be outputted\\n\\t\\t\\t\\t\\t\\t- obj // userdata // Object to be errored on, can be anything.\\n\\t\\t\\t\\t\\t\\t- line // number // The line the error occurs on\\n\\t\\t\\t\\t\\t- Returns\\n\\t\\t\\t\\t\\t\\t- None\\n\\t\\t\\t\\t\\t\\t\\n\\t\\t\\tAlphaLibrary.PrivateServer{}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\t-\\tAlphaLibrary.PrivateServer.CreateServer()\\n\\t\\t\\t\\t\\t- Description\\n\\t\\t\\t\\t\\t\\t- Creates a private server for the current place\\n\\t\\t\\t\\t\\t- Parameters\\n\\t\\t\\t\\t\\t\\tName // Type // Description\\n\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\t- None // nil // Undefined\\n\\t\\t\\t\\t\\t- Returns\\n\\t\\t\\t\\t\\t\\t- Access code to Private Server\\t\\t\\t\\n\\t\\t\\t\\t\\n\\t\\t\\t\\t-\\tAlphaLibrary.PrivateServer.TeleToPrivate(ac, plrs)\\n\\t\\t\\t\\t\\t- Description\\n\\t\\t\\t\\t\\t\\t- Sends an array of players to a private server using an access code.\\n\\t\\t\\t\\t\\t- Parameters\\n\\t\\t\\t\\t\\t\\tName // Type // Description\\n\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\t- ac // string // Private server access code\\n\\t\\t\\t\\t\\t\\t- plrs // table // Table of player objects\\n\\t\\t\\t\\t\\t- Returns\\n\\t\\t\\t\\t\\t\\t- None\\t\\n\\t\\t\\t\\t\\n\\t\\t\\t\\t\\n\\t\\t\\t\\t\\n\\t>>Note<<\\n\\t\\t\\n\\t\\t-\\tI don't suggest you delete the Library itself in game, and/or the\\n\\t\\tAlphaLibrary_Secure script in ServerScriptService.\\n\\t\\t-\\tAlphaLibrary.FindChildOfData, properties table MUST have a name, example would be {Name = 'Terrain'}.\\n\\t\\t-\\tAlphaLibrary.FindChildOfData, the search will retry five times, if it exceeds five times, the product may return nil.\\n\\t\\t-\\tAlphaLibrary.Instance.New, the properties table MUST have a ClassName value, example may be {ClassName = 'LocalScript'}\\n\\t\\t-\\tAlphaLibrary.Instance.New/ConvertClass, both property tables cannot contain something that can't be changed, otherwise\\n\\t\\tyou wil receive an error in the output.\\n\\t\\t-\\tAlphaLibrary.NewThread, requires a thread of lines an example may be AlphaLibrary.NewThread(function() print'Hello! It\\\\'s me!' end)\\n\\t\\t-\\tAlphaLibrary.SearchInstance, do not search for workspace in game, otherwise it will return nil.\\n\\t\\t-\\tAll timed sub-libraries (AlphaLibrary.TimedFunction and AlphaLibrary.TimedThread) may be off-scale of\\n\\t\\thow long the function takes to finish, uses tick() to see how long it would take.\\n\\t\\t-\\tPLEASE NOTE THAT SOME OF THESE FUNCTIONS ARE CLIENT-SIDED OR SERVER-SIDED ONLY!\\n\\t\\t-\\tAlphaLibrary.InsertModel, please note that the model has to be owned by you and the creator of the place, or be owned by ROBLOX.\\n\\t\\t-\\tAlphaLibrary.Test.Error and AlphaLibrary.Test.Check seems to be the same, unfortunately, there is\\n\\t\\tbarely any documentation on these two on test service, so for right now they do the same thing.\\n\\t\\t-\\tAlphaLibrary.Test.FatalError and AlphaLibrary.Test.FatalRequire seems to be the same, due to the fact\\n\\t\\tthat there is barely any documentation on these two in test service, so for right now, they do the same thing.\\n\\t\\t-\\tAlphaLibrary.Test.Message and AlphaLibrary.Test.Checkpoint appear to be the same, they both input two blue pieces of text,\\n\\t\\tthis is due to the fact that there is not a lot of documentation on this, so for now thy do the same thing.\\n\\t\\t\\n--]]\\n\\nlocal script, library, mods = script, nil, script:children();\\nlibrary = setmetatable({},{__metatable = 'Locked'});\\n\\nlibrary.LoadLibrary = function(ln)\\n\\tln = tostring(ln);\\n\\tif (ln ~= nil) then\\n\\t\\tif (mods[ln] ~= nil) then\\n\\t\\t\\treturn mods[ln];\\n\\t\\tend;\\n\\telse\\n\\t\\tassert(false, 'Library_name is nil');\\n\\tend;\\nend;\\n\\nreturn library;\",\"Archivable\":true,\"Parent\":null,\"DataCost\":104,\"ClassName\":\"ModuleScript\",\"Name\":\"AlphaLibrary\",\"LinkedSource\":\"\"}"}
