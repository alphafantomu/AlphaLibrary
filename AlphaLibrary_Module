{"Libraries":{"TimedFunction":"{\"Source\":\"\\nreturn function(func)\\n\\tif (func) then\\n\\t\\tlocal starttick = tonumber(tick());\\n\\t\\tfunc();\\n\\t\\tlocal endtick = tonumber(tick());\\n\\t\\twarn('That function took: '..endtick - starttick..' seconds');\\n\\tend;\\nend;\",\"Archivable\":true,\"Parent\":null,\"DataCost\":4,\"ClassName\":\"ModuleScript\",\"Name\":\"TimedFunction\",\"LinkedSource\":\"\"}","Weld":"{\"Source\":\"\\nreturn function(p1, p2)\\n\\tif (p1 ~= nil and p2 ~= nil) then\\n\\t\\tlocal Weld = Instance.new'Weld';\\n\\t\\tWeld.Parent = p1;\\n\\t\\tWeld.Part0 = p1;\\n\\t\\tWeld.Part1 = p2;\\n\\t\\tWeld.Name = p1.Name..'_to_'..p2.Name;\\n\\t\\treturn Weld;\\n\\telse\\n\\t\\tassert(false, 'Part0 or Part1 are unable to be identified.');\\n\\tend;\\nend;\",\"Archivable\":true,\"Parent\":null,\"DataCost\":4,\"ClassName\":\"ModuleScript\",\"Name\":\"Weld\",\"LinkedSource\":\"\"}","Vector3ToCframe":"{\"Source\":\"\\nreturn function(vector3)\\n\\tif (type(vector3) == 'userdata') then\\n\\t\\treturn CFrame.new(vector3.x, vector3.y, vector3.z);\\n\\telse\\n\\t\\tassert(false, 'Vector3 is not a userdata.');\\n\\tend;\\nend;\",\"Archivable\":true,\"Parent\":null,\"DataCost\":4,\"ClassName\":\"ModuleScript\",\"Name\":\"Vector3ToCframe\",\"LinkedSource\":\"\"}","Motor":"{\"Source\":\"\\nreturn function(p1, p2)\\n\\tif (p1 ~= nil and p2 ~= nil) then\\n\\t\\tlocal Motor = Instance.new'Motor';\\n\\t\\tMotor.Parent = p1;\\n\\t\\tMotor.Part0 = p1;\\n\\t\\tMotor.Part1 = p2;\\n\\t\\tMotor.Name = p1.Name..'_to_'..p2.Name;\\n\\t\\treturn Motor;\\n\\telse\\n\\t\\tassert(false, 'Part0 or Part1 are unable to be identified.');\\n\\tend;\\nend;\",\"Archivable\":true,\"Parent\":null,\"DataCost\":4,\"ClassName\":\"ModuleScript\",\"Name\":\"Motor\",\"LinkedSource\":\"\"}","IsLegalBadge":"{\"Source\":\"\\nreturn function(id)\\n\\tif (id ~= nil) then\\n\\t\\tlocal Badge = game:service'BadgeService';\\n\\t\\treturn Badge:IsLegal(id);\\n\\telse\\n\\t\\tassert(false, 'Badge ID is nil');\\n\\tend;\\nend;\",\"Archivable\":true,\"Parent\":null,\"DataCost\":4,\"ClassName\":\"ModuleScript\",\"Name\":\"IsLegalBadge\",\"LinkedSource\":\"\"}","NewThread":"{\"Source\":\"\\nreturn function(...)\\n\\tfor _, function_ in next, {...} do\\n\\t\\tspawn(function_);\\n\\tend;\\nend;\",\"Archivable\":true,\"Parent\":null,\"DataCost\":4,\"ClassName\":\"ModuleScript\",\"Name\":\"NewThread\",\"LinkedSource\":\"\"}","FindChildOfData":"{\"Source\":\"\\nreturn function(obj, t)\\n\\tif (obj ~= nil and type(t) == 'table') then\\n\\t\\tlocal FoundObj, Stop, Tries = nil, false, 0;\\n\\t\\trepeat\\n\\t\\t\\twait();\\n\\t\\t\\tlocal NewObj = obj:FindFirstChild(t.Name);\\n\\t\\t\\tif (NewObj ~= nil) then\\n\\t\\t\\t\\tTries = Tries + 1;\\n\\t\\t\\t\\tfor i,v in next, t do\\n\\t\\t\\t\\t\\tif (NewObj[i] ~= nil) then\\n\\t\\t\\t\\t\\t\\tif (NewObj[i] == v and Stop == false) then\\n\\t\\t\\t\\t\\t\\t\\tFoundObj = NewObj;\\n\\t\\t\\t\\t\\t\\t\\tStop = true;\\n\\t\\t\\t\\t\\t\\tend;\\n\\t\\t\\t\\t\\tend;\\n\\t\\t\\t\\tend;\\n\\t\\t\\tend;\\n\\t\\tuntil\\n\\t\\t\\tStop == true and FoundObj ~= nil or Tries >= 5;\\n\\t\\tif (Tries >= 5) then\\n\\t\\t\\tassert(false, 'The maximum amount of tries exceeded five, therefore \\\"FindChildOfData\\\" will return nil.');\\n\\t\\tend;\\n\\t\\treturn FoundObj;\\n\\telse\\n\\t\\tassert(false, 'Object or table is not a valid variable.');\\n\\tend;\\nend;\",\"Archivable\":true,\"Parent\":null,\"DataCost\":4,\"ClassName\":\"ModuleScript\",\"Name\":\"FindChildOfData\",\"LinkedSource\":\"\"}","AwardBadge":"{\"Source\":\"\\nreturn function(id, badid)\\n\\tlocal Badge = game:service'BadgeService';\\n\\tif (type(id) == 'number') then\\n\\t\\tBadge:AwardBadge(id, badid);\\n\\telseif (type(id) == 'userdata') then\\n\\t\\tif (id.ClassName == 'Player') then\\n\\t\\t\\tid = id.UserId;\\n\\t\\t\\tBadge:AwardBadge(id, badid);\\n\\t\\telse\\n\\t\\t\\tassert(false, 'PLR_INSTANCE is not a player.');\\n\\t\\tend;\\n\\telse\\n\\t\\tassert(false, 'PLR_ID is not valid.');\\n\\tend;\\nend;\",\"Archivable\":true,\"Parent\":null,\"DataCost\":4,\"ClassName\":\"ModuleScript\",\"Name\":\"AwardBadge\",\"LinkedSource\":\"\"}","GivePoints":"{\"Source\":\"\\nreturn function(id, amt)\\n\\tlocal Points = game:service'PointsService';\\n\\tamt = tonumber(amt);\\n\\tif (type(id) == 'number') then\\n\\t\\tPoints:AwardPoints(id, amt);\\n\\telseif (type(id) == 'userdata') then\\n\\t\\tif (id.ClassName == 'Player') then\\n\\t\\t\\tid = id.UserId;\\n\\t\\t\\tPoints:AwardPoints(id, amt);\\n\\t\\telse\\n\\t\\t\\tassert(false, 'PLR_INSTANCE is not a player.');\\n\\t\\tend;\\n\\telse\\n\\t\\tassert(false, 'PLR_ID is not valid.');\\n\\tend;\\nend;\\n\\n\\n\",\"Archivable\":true,\"Parent\":null,\"DataCost\":4,\"ClassName\":\"ModuleScript\",\"Name\":\"GivePoints\",\"LinkedSource\":\"\"}","Instance":"{\"Source\":\"\\nreturn {\\n\\tNew = function(p)\\n\\t\\tif (type(p) == 'table') then\\n\\t\\t\\tlocal Obj = Instance.new(p.ClassName);\\n\\t\\t\\tfor i,v in next, p do\\n\\t\\t\\t\\tlocal run, err = pcall(function()\\n\\t\\t\\t\\t\\tif (Obj[i] ~= nil) then\\n\\t\\t\\t\\t\\t\\tObj[i] = v;\\n\\t\\t\\t\\t\\tend;\\n\\t\\t\\t\\tend);\\n\\t\\t\\t\\tif (not run) then\\n\\t\\t\\t\\t\\tassert(false, tostring(err));\\n\\t\\t\\t\\tend;\\n\\t\\t\\tend;\\n\\t\\telse\\n\\t\\t\\tassert(false, 'Properties is not a valid table');\\n\\t\\tend;\\n\\tend;\\n\\tConvertClass = function(obj, cn, prop)\\n\\t\\tif (obj ~= nil and type(cn) == 'string') then\\n\\t\\t\\tlocal Converted = Instance.new(cn);\\n\\t\\t\\tConverted.Parent = obj.Parent;\\n\\t\\t\\tfor i, v in next, prop do\\n\\t\\t\\t\\tlocal run, err = pcall(function()\\n\\t\\t\\t\\t\\tif (obj[v] ~= nil) then\\n\\t\\t\\t\\t\\t\\tif (Converted[v] ~= nil) then\\n\\t\\t\\t\\t\\t\\t\\tConverted[v] = obj[v];\\n\\t\\t\\t\\t\\t\\tend;\\n\\t\\t\\t\\t\\tend;\\n\\t\\t\\t\\tend);\\n\\t\\t\\t\\tif (not run) then\\n\\t\\t\\t\\t\\tassert(false, tostring(err));\\n\\t\\t\\t\\tend;\\n\\t\\t\\tend;\\n\\t\\t\\tobj:Destroy();\\n\\t\\telse\\n\\t\\t\\tassert(false, 'Object or Classname is not a valid variable');\\n\\t\\tend;\\n\\tend;\\n};\",\"Archivable\":true,\"Parent\":null,\"DataCost\":4,\"ClassName\":\"ModuleScript\",\"Name\":\"Instance\",\"LinkedSource\":\"\"}","IsClientSided":"{\"Source\":\"\\nreturn function()\\n\\tlocal Players, returned = game:service'Players', false;\\n\\tif (Players.LocalPlayer ~= nil) then\\n\\t\\treturned = true;\\n\\telseif (Players.LocalPlayer == nil) then\\n\\t\\treturned = false;\\n\\telse\\n\\t\\treturned = false;\\n\\tend;\\n\\treturn returned;\\nend;\",\"Archivable\":true,\"Parent\":null,\"DataCost\":4,\"ClassName\":\"ModuleScript\",\"Name\":\"IsClientSided\",\"LinkedSource\":\"\"}","TimedThread":"{\"Source\":\"\\nreturn function(...)\\n\\tif (...) then\\n\\t\\tlocal starttick = tonumber(tick());\\n\\t\\tfor _, function_ in next, {...} do\\n\\t\\t\\tspawn(function_);\\n\\t\\tend;\\n\\t\\tlocal endtick = tonumber(tick());\\n\\t\\twarn('That thread took: '..endtick - starttick..' seconds');\\n\\tend;\\nend;\",\"Archivable\":true,\"Parent\":null,\"DataCost\":4,\"ClassName\":\"ModuleScript\",\"Name\":\"TimedThread\",\"LinkedSource\":\"\"}","HttpState":"{\"Source\":\"\\nreturn function()\\n\\tlocal Http = game:service'HttpService';\\n\\tlocal State = true;\\n\\tlocal run, err = pcall(function() Http:GetAsync('google.com') end);\\n\\tif (not run) then\\n\\t\\tif (tostring(err) == 'Http requests are not enabled') then\\n\\t\\t\\tState = false;\\n\\t\\telse\\n\\t\\t\\tState = true;\\n\\t\\tend;\\n\\tend;\\n\\treturn State;\\nend;\",\"Archivable\":true,\"Parent\":null,\"DataCost\":4,\"ClassName\":\"ModuleScript\",\"Name\":\"HttpState\",\"LinkedSource\":\"\"}","SearchInstance":"{\"Source\":\"\\nreturn function(obj, name)\\n\\tif (obj ~= nil and name ~= nil) then\\n\\t\\tlocal SearchObj = nil;\\n\\t\\tSearchObj = function(ob)\\n\\t\\t\\tlocal returned = nil;\\n\\t\\t\\tif (ob:children() ~= nil) then\\n\\t\\t\\t\\tif (ob:FindFirstChild(name) ~= nil) then\\n\\t\\t\\t\\t\\treturned = ob:FindFirstChild(name);\\n\\t\\t\\t\\telse\\n\\t\\t\\t\\t\\tfor i = 1, #ob:children() do\\n\\t\\t\\t\\t\\t\\tif (ob:children()[i] ~= nil) then\\n\\t\\t\\t\\t\\t\\t\\tif (returned == nil) then\\n\\t\\t\\t\\t\\t\\t\\t\\treturned = ob:children()[i];\\n\\t\\t\\t\\t\\t\\t\\tend;\\n\\t\\t\\t\\t\\t\\tend;\\n\\t\\t\\t\\t\\tend;\\n\\t\\t\\t\\tend;\\n\\t\\t\\tend;\\n\\t\\t\\tif (returned == workspace) then\\n\\t\\t\\t\\treturned = nil;\\n\\t\\t\\tend;\\n\\t\\t\\treturn returned;\\n\\t\\tend;\\n\\t\\treturn SearchObj(obj);\\n\\telse\\n\\t\\tassert(false, 'Object or Name is nil');\\n\\tend;\\nend;\",\"Archivable\":true,\"Parent\":null,\"DataCost\":4,\"ClassName\":\"ModuleScript\",\"Name\":\"SearchInstance\",\"LinkedSource\":\"\"}","UserHasBadge":"{\"Source\":\"\\nreturn function(id, badid)\\n\\tlocal Badge = game:service'BadgeService';\\n\\tif (type(id) == 'number') then\\n\\t\\tBadge:AwardBadge(id, badid);\\n\\telseif (type(id) == 'userdata') then\\n\\t\\tif (id.ClassName == 'Player') then\\n\\t\\t\\tid = id.UserId;\\n\\t\\t\\tBadge:AwardBadge(id, badid);\\n\\t\\telse\\n\\t\\t\\tassert(false, 'PLR_INSTANCE is not a player.');\\n\\t\\tend;\\n\\telse\\n\\t\\tassert(false, 'PLR_ID is not valid.');\\n\\tend;\\nend;\",\"Archivable\":true,\"Parent\":null,\"DataCost\":4,\"ClassName\":\"ModuleScript\",\"Name\":\"UserHasBadge\",\"LinkedSource\":\"\"}","SetCoreGuis":"{\"Source\":\"\\nreturn function(plr, val, coregui)\\n\\tif (type(plr) == 'userdata' and type(val) == 'bool' and plr:IsA'Player') then\\n\\t\\tlocal SG = game:service'StarterGui';\\n\\t\\tif (Enum.CoreGuiType[coregui] ~= nil) then\\n\\t\\t\\tSG:SetCoreGuiEnabled(Enum.CoreGuiType[coregui], val);\\n\\t\\telse\\n\\t\\t\\tassert(false, 'CoreGui value is not a valid variable.');\\n\\t\\tend;\\n\\telse\\n\\t\\tassert(false, 'Player, or Value is not a valid variable.');\\n\\tend;\\nend;\",\"Archivable\":true,\"Parent\":null,\"DataCost\":4,\"ClassName\":\"ModuleScript\",\"Name\":\"SetCoreGuis\",\"LinkedSource\":\"\"}","IsDisabledBadge":"{\"Source\":\"\\nreturn function(id)\\n\\tif (id ~= nil) then\\n\\t\\tlocal Badge = game:service'BadgeService';\\n\\t\\treturn Badge:IsDisabled(id);\\n\\t\\telse\\n\\t\\tassert(false, 'Badge ID is nil');\\n\\tend;\\nend;\",\"Archivable\":true,\"Parent\":null,\"DataCost\":4,\"ClassName\":\"ModuleScript\",\"Name\":\"IsDisabledBadge\",\"LinkedSource\":\"\"}","BrickColor3":"{\"Source\":\"\\nreturn function(bc)\\n\\tif (bc ~= nil) then\\n\\t\\treturn bc.Color;\\n\\telse\\n\\t\\tassert(false, 'BrickColor is nil');\\n\\tend;\\nend;\",\"Archivable\":true,\"Parent\":null,\"DataCost\":4,\"ClassName\":\"ModuleScript\",\"Name\":\"BrickColor3\",\"LinkedSource\":\"\"}","CFrameToVector3":"{\"Source\":\"\\nreturn function(cframe)\\n\\tif (type(cframe) == 'userdata') then\\n\\t\\treturn Vector3.new(cframe.x, cframe.y, cframe.z);\\n\\telse\\n\\t\\tassert(false, 'CFrame is not a userdata.');\\n\\tend;\\nend;\",\"Archivable\":true,\"Parent\":null,\"DataCost\":4,\"ClassName\":\"ModuleScript\",\"Name\":\"CFrameToVector3\",\"LinkedSource\":\"\"}","LoadAssets":"{\"Source\":\"\\nreturn function(t)\\n\\tif (t ~= nil and type(t) == 'table') then\\n\\t\\tlocal CP = game:service'ContentProvider';\\n\\t\\tfor i, v in next, t do\\n\\t\\t\\twarn('AlphaLibrary>LoadAssets: Loading asset '..v);\\n\\t\\t\\tCP:Preload('rbxassetid://'..v);\\n\\t\\tend;\\n\\telse\\n\\t\\tassert(false, 'Table is not a valid variable.');\\n\\tend;\\nend;\",\"Archivable\":true,\"Parent\":null,\"DataCost\":4,\"ClassName\":\"ModuleScript\",\"Name\":\"LoadAssets\",\"LinkedSource\":\"\"}"},"AlphaLibrary":"{\"Source\":\"\\nlocal tos, ton = tostring, tonumber;\\nlocal insert, foreach = table.insert, table.foreach;\\nlocal script, library, child, fin = script, nil, script:children(), nil;\\nlibrary = setmetatable({},{__metatable = 'Locked'});\\nfor i,v in next, child do\\n    if (v.ClassName == 'ModuleScript') then\\n        library[v.Name] = require(v);\\n    end;\\nend;\\n\\nreturn library;\",\"Archivable\":true,\"Parent\":null,\"DataCost\":84,\"ClassName\":\"ModuleScript\",\"Name\":\"AlphaLibrary\",\"LinkedSource\":\"\"}"}
